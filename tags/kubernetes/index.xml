<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kubernetes on ETdoFresh</title>
    <link>/tags/kubernetes/</link>
    <description>Recent content in Kubernetes on ETdoFresh</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 05 Jul 2020 06:59:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/kubernetes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Connecting to Kubernetes Dashboard</title>
      <link>/connecting-to-kubernetes-dashboard/</link>
      <pubDate>Sun, 05 Jul 2020 06:59:00 +0000</pubDate>
      
      <guid>/connecting-to-kubernetes-dashboard/</guid>
      <description>First install updated dashboard
kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0/aio/deploy/recommended.yaml Then start the dashboard
kubectl proxy And finally, use a browser to open up the dashboard
http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/ I just use the kubeconfig file in my ~/.kube/config directory (or c:\users\my_username\.kube\config)</description>
    </item>
    
    <item>
      <title>Monitoring Kubernetes Pods/Services/etc</title>
      <link>/monitoring-kubernetes-pods-services-etc/</link>
      <pubDate>Sun, 05 Jul 2020 06:21:00 +0000</pubDate>
      
      <guid>/monitoring-kubernetes-pods-services-etc/</guid>
      <description>I forgot this, and then found it out again. Figured I&amp;rsquo;d just write a small memory fragment here&amp;hellip;
To monitor/watch a Kubernetes object&amp;hellip;
kubectl get pod -w NAME READY STATUS RESTARTS AGE etdofresh-wordpress-7d8ff94558-zfbfl 1/1 Running 0 10h etdofresh-wordpress-mariadb-0 1/1 Running 0 12h ghost-test2-669b4b469-gxw66 1/1 Running 0 5h43m ghost-test2-mariadb-0 1/1 Running 0 5h46m minio-688b86c7c4-qzglp 1/1 Running 0 4m38s And basically it just writes a new line if something happens.</description>
    </item>
    
    <item>
      <title>Kubernetes open port to local machine</title>
      <link>/kubernetes-open-port-to-local-machine/</link>
      <pubDate>Sun, 05 Jul 2020 06:17:00 +0000</pubDate>
      
      <guid>/kubernetes-open-port-to-local-machine/</guid>
      <description>So, i found out something cool today&amp;hellip; when installing minio
helm install minio bitnami/minio I found out via these instructions I can forward a port directly to my local pc.
kubectl port-forward --namespace default svc/minio 9000:9000 Forwarding from 127.0.0.1:9000 -&amp;gt; 9000 Forwarding from [::1]:9000 -&amp;gt; 9000 In browser&amp;hellip;
http://localhost:9000/minio This is my local machine that i am administering from&amp;hellip; I think this may open lots of cool opportunities for accessing the volumes inside&amp;hellip;</description>
    </item>
    
    <item>
      <title>Move Wordpress Site from Linode to LKE</title>
      <link>/move-wordpress-site-from-linode-to-lke/</link>
      <pubDate>Sat, 04 Jul 2020 22:57:00 +0000</pubDate>
      
      <guid>/move-wordpress-site-from-linode-to-lke/</guid>
      <description>Right now, I have a wordpress site being hosted on a single Linode server. However, I&amp;rsquo;m making the jump to kubernete services/Linode Kubernetes Engine (LKE). Here is my devops journey to getting this done.
My Current Setup  Linode Server running Debian 8 with 1 CPU, 30GB Storage, and 2GB RAM [$10/mo]  Nginx installed Php installed Wordpress downloaded Nginx, Php configuration files updated to work with wordpress Hosting Port 80/443 for wordpress site Hosting Port 22 for ssh All maintenance to server done via ssh terminal like ssh.</description>
    </item>
    
  </channel>
</rss>